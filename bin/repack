#!/bin/sh

clear
cd /data/local/autorepack
git="/data/data/com.termux/files/usr/bin/git"
$git switch master &> /dev/null
$git remote update &> /dev/null
$git restore . &> /dev/null

fetch_updates(){
    $git fetch &> /dev/null
    commits="$($git log --pretty=format:"%s~" --date=relative master..origin/master)"
    cd /data/adb/modules/autorepacker/system/bin/
    $git fetch &> /dev/null
    commits+="$($git log --pretty=format:%s~ --date=relative master..origin/master)"
}

check_updates(){
    echo
    echo -e "\e[3mChecking for updates...\e[0m"
    fetch_updates
    echo
    if [ ! -z "$commits" ]; then
        echo -e "\e[1mUpdates:\e[0m"
        awk -F '~' '{for(i=1; i<=NF-1; i++){ print "\033[3m ◍ " toupper(substr($i,0,1))tolower(substr($i,2))"\033[0m"}}' <<< "$commits"
        echo
        echo -e "\e[1mType in 'update now' to receive the updates.\e[0m"
        echo
    else
        echo -e "\e[3mYou are currently up-to-date.\e[0m"
        echo
    fi
}

update(){
    clear
    echo
    fetch_updates
    [ -z "$commits" ] && echo -e "\e[3mYou are already up-to-date.\e[0m" && exit || unset commits
    echo -e "\e[3mUpdating...\e[0m"
    $git pull &> /dev/null
    cd /data/local/autorepack
    $git pull &> /dev/null
    fetch_updates
    chmod -R +x /data/adb/modules/autorepacker/system/bin/
    cp /data/adb/modules/autorepacker/system/bin/* /system/bin/ &> /dev/null
    [ -z "$commits" ] && echo -e "\e[3mSuccessfully updated.\e[0m" && echo || echo -e "\e[3mProblems occured during update. Here's the full output:\n\n\e[0m$($git pull)"
    echo
}

fetch_history(){
    commits=$($git log --reverse -n 10 | sed 's/^[a-zA-Z].*$//; /^$/ d')
    if [ ! -z "$commits" ]; then
        echo -e "\e[1mPast Updates:\e[0m"
        while read line; do
            echo -e "\e[3m ◍ $(echo $line| awk '{print toupper(substr($0,0,1))tolower(substr($0,2))}')\e[0m"
        done <<< $commits
        echo
    else
        echo -e "\e[3mNo past history found.\e[0m"
        echo
    fi
}

revert(){
    echo -e "\n\e[1mUPDATE REVERTER\e[0m\n"
    hashes=$($git log -n 10 | grep '^commit' | cut -d' ' -f2)
    while [ 0 -eq 0 ]; do
        tac <<< $history | sed '/Past/ d' | awk '{ print NR")", $0 }' 
        echo
        echo -en "\e[3mSelect an update to revert back to: \e[0m" && read number
        if [[ $number -lt 11 && $number -gt 0 ]]; then
            $git checkout `sed -n "${number}p" <<< "$hashes"` &> /dev/null
            echo -e "\e[1;32mReverted updates. If you want to revert this process, simply run update command once\e[0m"
            break
        else
            echo -e "\e[1;32mNo selection made\e[0m"
            exit
        fi
    done
}

case "$1" in
 "")
   sh repack.sh
 ;;
 "--update"|"-u")
   check_updates
 ;;
 "--update-now"|"-un")
   update
 ;;
 "--revert"|"-r")
   history="`fetch_history`"
   revert
 ;;
 "--update-history"|"-uh")
   fetch_history
 ;;
 "--recovery-manager"|"-rm")
   sh recovery_manager.sh
 ;;
 *|"--help"|"-h")
    echo -e "\n\033[1;31mUsage: \033[1;1;32mrepack \033[1;37m[ --help, -h ] [ --update, -u ] [ --update-now, -un ], [ --revert, -r ], [ --update-history, -uh ], [ --recovery-manager, -rm ]\033[1;32m\n\n -u  --update\t\t\033[37mLists new updates\n\n \033[1;32m-un --update-now\t\033[37mInstalls the new updates\n\n \033[1;32m-r  --revert\t\t\033[37mRolls back any updates in case of \n\t\t\tcertain problems. It can only \n\t\t\tgo back 10 updates.\n\n \033[1;32m-uh --update-history\t\033[37mLists the last 10 updates\n\n \033[1;32m-rm --recovery-manager\t\033[37mA tool to import, download and remove \n\t\t\trecoveries\n\033[0m"
 ;;
esac
